from django.contrib.auth import login, logout, update_session_auth_hash
from django.contrib.auth.models import User
from django.http import FileResponse
from django.shortcuts import render, redirect
from django.urls import reverse_lazy, reverse

from .models import Category, Game, SystemRequirement, Comment, Profile, Ip
from .forms import LoginForm, RegisterForm, GameForm, SystemForm, CommentForm, EditProfileForm, EditAccountFrom
from django.contrib import messages
from django.views.generic import ListView, DetailView, CreateView, UpdateView, DeleteView
from .tests import get_user_ip


# Create your views here.
# def index(request):
#     games = Game.objects.all()[::-1]
#     context = {
#         'games': games,
#         'title': '–ö–∞—á–∞–π —Ç–æ–ø –∏–≥—Ä—ã'
#     }
#
#     return render(request, 'warrior_point/index.html', context)

class GameListView(ListView):
    model = Game
    context_object_name = 'games'
    template_name = 'warrior_point/index.html'
    extra_context = {
        'title': '–ö–∞—á–∞–π —Ç–æ–ø –∏–≥—Ä—ã'
    }

# =========================================================================================================

# –í—å—é—à–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–≥—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
# def game_category_view(request, pk):
#     games = Game.objects.filter(category_id=pk)[::-1]  # –ü–æ–ª—É—á–∏–º –∏–≥—Ä—ã –ø–æ id –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
#     category = Category.objects.get(pk=pk)
#
#     context = {
#         'games': games,
#         'title': f'–ö–∞—á–∞–π {category.cat_name}'
#     }
#     return render(request, 'warrior_point/index.html', context)

class GameByCategory(GameListView):

    # –ú–µ—Ç–æ–¥ —á—Ç–æ –±—ã –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–∏—Ç—å –≤—ã–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö
    def get_queryset(self):
        games = Game.objects.filter(category_id=self.kwargs['pk'])
        return games

    # –ú–µ—Ç–æ–¥ –ø—Ä–∏ –ø–æ–º–æ—â–∏ –∫–æ—Ç–æ—Ä–≥–æ –¥–æ–ø–æ–Ω–∏—Ç–µ–ª—å–Ω–æ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
    def get_context_data(self, *, object_list=None, **kwargs):
        context = super().get_context_data()
        category = Category.objects.get(pk=self.kwargs['pk'])
        context['title'] = f'–ö–∞—á–∞–π {category.cat_name}'
        print(context)
        return context




# =========================================================================================================

# –í—å—é—à–∫–∞ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–µ—Ç–∞–ª–∏ –ò–≥—Ä—ã
# def game_detail_view(request, pk):
#     game = Game.objects.get(pk=pk)  # –ü–æ–ª—É—á–∏–º –∏–≥—Ä—É –ø–æ id
#     systems = SystemRequirement.objects.get(game_id=pk)
#
#     context = {
#         'game': game,
#         'title': game.title,
#         'systems': systems
#     }
#     return render(request, 'warrior_point/game_detail.html', context)

class GameDetailView(DetailView):
    model = Game
    context_object_name = 'game'

    def get_context_data(self, **kwargs):
        context = super().get_context_data()
        game = Game.objects.get(pk=self.kwargs['pk'])  # –ü–æ–ª—É—á–∏–º –∏–≥—Ä—É –ø–æ id
        systems = SystemRequirement.objects.get(game_id=game.pk)
        context['systems'] = systems  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
        context['title'] = game.title
        context['comments'] = Comment.objects.filter(game=game)

        ip = get_user_ip(self.request)
        if Ip.objects.filter(ip=ip).exists():
            game.views.add(Ip.objects.get(ip=ip))
        else:
            Ip.objects.create(ip=ip)
            game.views.add(Ip.objects.get(ip=ip))

        if self.request.user.is_authenticated:
            context['form'] = CommentForm()
        return context




# =========================================================================================================

# –í—å—é—à–∫–∞ –¥–ª—è –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def user_login_view(request):
    if request.method == 'POST':
        # –õ–æ–≥–∏–∫–∞ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        form = LoginForm(data=request.POST) # –ü–æ–ª—É—á–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–æ—Ä–º—ã
        if form.is_valid():  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º—É –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å
            user = form.get_user()  # –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–¥ –ø–æ –ª–æ–≥–∏–Ω—É –∏ –ø–∞—Ä–æ–ª—é
            if user:
                login(request, user)
                messages.success(request, f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å {user.username}')
                return redirect('index')
            else:
                messages.error(request, '–¢—ã –æ–ª–µ–Ω—å –≤–≤—ë–ª –Ω–µ –≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å')
                return redirect('login')
        else:
            messages.error(request, '–¢—ã –æ–ª–µ–Ω—å –≤–≤—ë–ª –Ω–µ –≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å')
            return redirect('login')

    else:
        form = LoginForm()

    context = {
        'title': '–í—Ö–æ–¥ –≤ –ê–∫–∫–∞—É–Ω—Ç',
        'login_form': form
    }
    if not request.user.is_authenticated:
        return render(request, 'warrior_point/login.html', context)
    else:
        return redirect('index')



# –í—å—é—à–∫–∞ –¥–ª—è –≤—ã—Ö–æ–¥–∞
def user_logout_view(request):
    logout(request)
    messages.warning(request, '–£–∂–µ —É—Ö–æ–¥–∏—Ç–µ üò•')
    return redirect('index')


# –í—å—é—à–∫–∞ –¥–ª—è –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
def register_view(request):
    if request.method == 'POST':
        form = RegisterForm(request.POST)
        if form.is_valid():
            user = form.save()
            profile = Profile.objects.create(user=user)
            profile.save()
            messages.success(request, '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ.\n–ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å')
            return redirect('login')
        else:
            for field in form.errors:
                messages.error(request, form.errors[field].as_text())
            return redirect('register')
    else:
        form = RegisterForm()

    context = {
        'title': '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è',
        'form': form
    }
    if not request.user.is_authenticated:
        return render(request, 'warrior_point/register.html', context)
    else:
        return redirect('index')

# =============================================================

# –í—å—é—à–∫–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –ò–≥—Ä—ã
# def add_game_view(request):
#     if request.method == 'POST':
#         form = GameForm(request.POST, request.FILES)
#         system_form = SystemForm(request.POST)
#         if form.is_valid() and system_form.is_valid():
#             game = form.save()
#             game.save()
#             system = system_form.save(commit=False)
#             system.game = game
#             system.save()
#             return redirect('game', game.pk)
#         else:
#             return redirect('add_game')
#
#     else:
#         form = GameForm()
#         system_form = SystemForm()
#
#     context = {
#         'title': '–î–æ–±–∞–≤–∏—Ç—å –∏–≥—Ä—É',
#         'form': form,
#         'system_form': system_form
#     }
#
#     return render(request, 'warrior_point/add_game.html', context)


class NewGame(CreateView):
    form_class = GameForm
    template_name = 'warrior_point/add_game.html'
    extra_context = {
        'title': '–î–æ–±–∞–≤–∏—Ç—å –∏–≥—Ä—É'
    }
    # –ú–µ—Ç–æ–¥ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º
    def get(self, request, *args, **kwargs):
        if not self.request.user.is_staff:
            return redirect('index')
        else:
            return super(NewGame, self).get(request, *args, **kwargs)


    def get_context_data(self, **kwargs):
        context = super().get_context_data()
        context['system_form'] = SystemForm()
        return context

    def form_valid(self, form):
        response = super().form_valid(form)
        system_form = SystemForm(self.request.POST)
        if system_form.is_valid():
            system = system_form.save(commit=False)
            system.game = self.object
            system.save()
        return response

    # def post(self, request, *args, **kwargs):
    #     if request.method == 'POST':
    #         form = GameForm(request.POST, request.FILES)
    #         system_form = SystemForm(request.POST)
    #         if form.is_valid() and system_form.is_valid():
    #             game = form.save()
    #             game.save()
    #             system = system_form.save(commit=False)
    #             system.game = game
    #             system.save()
    #             return redirect('game', game.pk)
    #         else:
    #             return redirect('add_game')



class GameUpdateView(UpdateView):
    model = Game
    form_class = GameForm
    template_name = 'warrior_point/add_game.html'

    def get(self, request, *args, **kwargs):
        if not self.request.user.is_staff:
            return redirect('index')
        else:
            return super(GameUpdateView, self).get(request, *args, **kwargs)

    def get_context_data(self, **kwargs):
        context = super().get_context_data()
        game = Game.objects.get(pk=self.kwargs['pk'])
        systems = SystemRequirement.objects.get(game=game)
        context['system_form'] = SystemForm(instance=systems)
        context['title'] = f'–ò–∑–º–µ–Ω–∏—Ç—å: {game.title}'
        return context


    def form_valid(self, form):
        response = super().form_valid(form)  # –ü–æ–ª—É—á–µ–Ω–Ω—É—é —Ñ–æ—Ä–º—É –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å

        game = Game.objects.get(pk=self.kwargs['pk'])
        systems = SystemRequirement.objects.get(game=game)
        system_form = SystemForm(self.request.POST, instance=systems)
        if system_form.is_valid():
            system = system_form.save(commit=False)
            system.game = self.object
            system.save()
        return response



class GameDeleteView(DeleteView):
    model = Game
    context_object_name = 'game'
    success_url = reverse_lazy('index')

    def get(self, request, *args, **kwargs):
        if not self.request.user.is_staff:
            return redirect('index')
        else:
            return super(GameDeleteView, self).get(request, *args, **kwargs)



# –í—å—é—â–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–≥—Ä
class SearchGames(GameListView):
    def get_queryset(self):
        word = self.request.GET.get('q')
        games = Game.objects.filter(title__iregex=word)
        return games



# –í—å—é—à–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
def save_comment_view(request, pk):
    form = CommentForm(request.POST)
    if form.is_valid():
        comment = form.save(commit=False)
        comment.user = request.user
        comment.game = Game.objects.get(pk=pk)
        comment.save()
        return redirect('game', pk)


class CommentUpdate(UpdateView):
    model = Comment
    form_class = CommentForm
    template_name = 'warrior_point/game_detail.html'

    def get_context_data(self, **kwargs):
        context = super().get_context_data()
        comment = Comment.objects.get(pk=self.kwargs['pk'])  # –ü–æ–ª—É—á–∏–º –∫–æ–º–º–µ–Ω—Ç –ø–æ id

        game = Game.objects.get(pk=comment.game.pk)  # –ü–æ–ª—É—á–∏–º –∏–≥—Ä—É –ø–æ id –∫–æ—Ç–æ—Ä—É—é –≤–æ–∑—å–º—ë–º —É –∫–æ–º–º–µ–Ω—Ç–∞
        systems = SystemRequirement.objects.get(game_id=game.pk)
        comments = Comment.objects.filter(game=game)
        comments = [i for i in comments if i.pk != comment.pk]  # –ü–æ–ª—É—á–∏–º –≤—Å–µ –≤—Å–µ –∫–æ–º–º–µ–Ω—Ç—ã –∫—Ä–æ–º–µ —Ç–æ–≥–æ —á—Ç–æ –∏–∑–º–µ–Ω—è–µ–º
        context['game'] = game
        context['systems'] = systems  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
        context['title'] = game.title
        context['comments'] = comments

        return context

    def get_success_url(self):
        return reverse('game', kwargs={'pk': self.object.game_id})



# –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤—å—é—à–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞
def comment_delete(request, comment_pk, game_pk):
    user = request.user if request.user.is_authenticated else None
    if user:
        comment = Comment.objects.get(user=user, pk=comment_pk, game=game_pk)
        comment.delete()
    return redirect('game', game_pk)


# –í—å—é—à–∫–∞ –¥–ª—è —Å–∫–∞—á–∫–∏ —Ñ–∞–π–ª–∞ —Ç–æ—Ä—Ä–µ–Ω—Ç–∞
def download_torrent(request, pk):
    if request.user.is_authenticated:
        game = Game.objects.get(pk=pk)
        response = FileResponse(open(game.torrent.path, mode='rb'))
        response['Content-Type'] = 'application/octet-stream'
        response['Content-Disposition'] = 'attachment; filename=%s' % game.torrent.name
        return response



def profile_view(request, username):
    user = request.user if request.user.is_authenticated else None
    if user:
        profile = Profile.objects.get(user=user)
        comments = Comment.objects.filter(user=user)
        count_comment = len(comments)

        context = {
            'title': f'–ü—Ä–æ—Ñ–∏–ª—å: {user}',
            'profile': profile,
            'count': count_comment
        }

        return render(request, 'warrior_point/profile.html', context)

    else:
        messages.success(request, '–ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —á—Ç–æ –±—ã –ø–µ—Ä–π—Ç–∏ –≤ –ø—Ä–æ—Ñ–∏–ª—å')
        return redirect('login')


# –í—å—à–∫–∞ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –ê–∫–∞—É–Ω—Ç–∞ –∏ –ø—Ä–æ—Ñ–∏–ª—è
def edit_account_profile_view(request, username):
    if not request.user.is_authenticated:
        return redirect('login')
    else:
        profile = Profile.objects.get(user=request.user)
        if profile:
            context = {
                'profile_form': EditProfileForm(instance=request.user.profile),
                'account_form': EditAccountFrom(instance=request.user),
                'title': f'–ò–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö {request.user.username}'
            }

            return render(request, 'warrior_point/edit.html', context)
        else:
            return redirect('login')




# –í—å—é—à–∫–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞
def edit_account_view(request):
    if not request.user.is_authenticated:
        return redirect('login')
    else:
        if request.method == 'POST':
            edict_account_form = EditAccountFrom(request.POST, instance=request.user)
            if edict_account_form.is_valid():
                edict_account_form.save()
                data = edict_account_form.cleaned_data  # –ü–æ–ª—É—á–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–æ—Ä–º—ã –≤ –≤–∏–¥–µ —Å–ª–æ–≤–æ—Ä—è
                user = User.objects.get(id=request.user.id)
                if user.check_password(data['old_password']):
                    if data['old_password'] and data['new_password'] == data['confirm_password']:
                        user.set_password(data['new_password'])
                        user.save()
                        update_session_auth_hash(request, user)  # –§—É–Ω–∫—Ü–∏—è –∫–æ—Ç–æ—Ä–∞—è –æ—Å—Ç–∞–≤–∏—Ç –Ω–∞—Å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–º–∏
                        messages.success(request, '–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω—ã')
                        return redirect('profile', user.username)
                    else:
                        for field in edict_account_form.errors:
                            messages.error(request, edict_account_form.errors[field].as_text())
                            return redirect('change', user.username)
                else:
                    for field in edict_account_form.errors:
                        messages.error(request, edict_account_form.errors[field].as_text())
                        return redirect('change', user.username)

                return redirect('profile', user.username)
            else:
                for field in edict_account_form.errors:
                    messages.error(request, edict_account_form.errors[field].as_text())
                    return redirect('change', request.user.username)




# –í—å—é—à–∫–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
def  edit_profile_view(request):
    if not request.user.is_authenticated:
        return redirect('login')
    else:
        if request.method == 'POST':
            form = EditProfileForm(request.POST, request.FILES, instance=request.user.profile)
            if form.is_valid():
                form.save()
                return redirect('profile', request.user.username)
            else:
                for field in form.errors:
                    messages.error(request, form.errors[field].as_text())
                    return redirect('change',  request.user.username)






